# coding=utf-8
import os
import SimpleITK as sitk
import slicer
from math import pi
import numpy as np


def command_iteration(method) :
    if (method.GetOptimizerIteration()==0):
        print("Scales: ", method.GetOptimizerScales())
    print("{0:3} = {1:7.5f} : {2}".format(method.GetOptimizerIteration(),
                                           method.GetMetricValue(),
                                           method.GetOptimizerPosition()))


# read input volumes

fixedImageFilename = '/Users/peterbehringer/MyImageData/ProstateRegistrationValidation/Images/Case1-t2ax-intraop.nrrd'
movingImageFilename= '/Users/peterbehringer/MyImageData/ProstateRegistrationValidation/Images/Case1-t2ax-N4.nrrd'

fixedVolume=sitk.ReadImage(fixedImageFilename, sitk.sitkFloat32)
movingVolume=sitk.ReadImage(movingImageFilename, sitk.sitkFloat32)

# read input masks

fixedMaskFilename = '/Users/peterbehringer/MyImageData/ProstateRegistrationValidation/Segmentations/Rater1/Case1-t2ax-intraop-TG-rater1.nrrd'
movingMaskFilename= '/Users/peterbehringer/MyImageData/ProstateRegistrationValidation/Segmentations/Rater1/Case1-t2ax-TG-rater1.nrrd'

fixedMask=sitk.ReadImage(fixedMaskFilename, sitk.sitkFloat32)
movingMask=sitk.ReadImage(movingMaskFilename, sitk.sitkFloat32)

# set output file paths


eulerTransPath = '/Users/peterbehringer/MyTesting/SimpleITK_Tests/initial_exhaustive.h5'
eulerTransPathAfterRotation = '/Users/peterbehringer/MyTesting/SimpleITK_Tests/eulerTransAfterRotation.h5'
rotatedImage='/Users/peterbehringer/MyTesting/SimpleITK_Tests/Rotated_image_1.nrrd'
bestEulerTransPath='/Users/peterbehringer/MyTesting/SimpleITK_Tests/bestEulerTrans.h5'
outTxPath='/Users/peterbehringer/MyTesting/SimpleITK_Tests/outTx_exhaustive.h5'
trans_rigid_beforeRegistrationPath='/Users/peterbehringer/MyTesting/SimpleITK_Tests/trans_rigid_beforeRegistration.h5'
outTxAfterRigidPath='/Users/peterbehringer/MyTesting/SimpleITK_Tests/outTxAfterRigid.h5'



# INITIALIZATION (Translation & Rotation)
# _______________________________

# Initialize ImageRegistrationMethod()
Reg=sitk.ImageRegistrationMethod()
Reg.SetMetricFixedMask(fixedMask)
Reg.SetMetricMovingMask(movingMask)
Reg.SetMetricAsCorrelation()
Reg.SetInterpolator(sitk.sitkLinear)

# use exhaustive Optimizer
sample_per_axis=8
Reg.SetOptimizerAsExhaustive([sample_per_axis/2,sample_per_axis/2,sample_per_axis/4,0,0,0])
# Reg.SetOptimizerScales([2.0*pi/sample_per_axis,2.0*pi/sample_per_axis,2.0*pi/sample_per_axis,1.0,1.0,1.0])
Reg.SetOptimizerScales([0.066*2*pi/sample_per_axis,2.0*pi/sample_per_axis,2.0*pi/sample_per_axis,1.0,1.0,1.0])

"""
  Reg.SetOptimizerAsExhaustive([sample_per_axis/2,sample_per_axis/2,sample_per_axis/4,0,0,0])
  Reg.SetOptimizerScales([1.0*pi/sample_per_axis,2.0*pi/sample_per_axis,2.0*pi/sample_per_axis,1.0,1.0,1.0])

  # from -90° to 90°
0 = -0.00343 : (-1.5707963267948966, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  1 = -0.00453 : (-1.308996938995747, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  2 = -0.00146 : (-1.0471975511965976, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  3 = -0.00145 : (-0.7853981633974483, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  4 = -0.00059 : (-0.5235987755982988, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  5 = -0.00032 : (-0.2617993877991494, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  6 = -0.00159 : (0.0, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  7 = -0.00316 : (0.2617993877991494, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  8 = -0.00156 : (0.5235987755982988, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  9 = -0.00019 : (0.7853981633974483, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 10 = -0.00790 : (1.0471975511965976, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 11 = -0.01985 : (1.308996938995747, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 12 = -0.01993 : (1.5707963267948966, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)

  Reg.SetOptimizerAsExhaustive([sample_per_axis/2,sample_per_axis/2,sample_per_axis/4,0,0,0])
  Reg.SetOptimizerScales([0.066*pi/sample_per_axis,2.0*pi/sample_per_axis,2.0*pi/sample_per_axis,1.0,1.0,1.0])

  # from -6° to 6°
 ('Scales: ', (0.017278759594743863, 0.5235987755982988, 0.5235987755982988, 1.0, 1.0, 1.0))
  0 = -0.00032 : (-0.10367255756846318, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  1 = -0.00044 : (-0.08639379797371932, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  2 = -0.00060 : (-0.06911503837897545, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  3 = -0.00079 : (-0.05183627878423159, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  4 = -0.00103 : (-0.034557519189487726, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  5 = -0.00124 : (-0.017278759594743863, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  6 = -0.00159 : (0.0, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  7 = -0.00194 : (0.017278759594743863, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  8 = -0.00216 : (0.034557519189487726, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  9 = -0.00239 : (0.05183627878423159, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 10 = -0.00271 : (0.06911503837897545, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 11 = -0.00302 : (0.08639379797371932, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 12 = -0.00332 : (0.10367255756846318, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)


  Reg.SetOptimizerAsExhaustive([sample_per_axis/2,sample_per_axis/2,sample_per_axis/4,0,0,0])
  Reg.SetOptimizerScales([0.209*pi/sample_per_axis,2.0*pi/sample_per_axis,2.0*pi/sample_per_axis,1.0,1.0,1.0])

('Scales: ', (0.054716072050022234, 0.5235987755982988, 0.5235987755982988, 1.0, 1.0, 1.0))
  0 = -0.00038 : (-0.3282964323001334, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  1 = -0.00033 : (-0.2735803602501112, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  2 = -0.00034 : (-0.21886428820008894, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  3 = -0.00025 : (-0.1641482161500667, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  4 = -0.00029 : (-0.10943214410004447, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  5 = -0.00077 : (-0.054716072050022234, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  6 = -0.00159 : (0.0, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  7 = -0.00248 : (0.054716072050022234, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  8 = -0.00346 : (0.10943214410004447, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  9 = -0.00391 : (0.1641482161500667, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 10 = -0.00333 : (0.21886428820008894, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 11 = -0.00315 : (0.2735803602501112, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 12 = -0.00313 : (0.3282964323001334, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)

Reg.SetOptimizerScales([0.066*pi,2.0*pi/sample_per_axis,2.0*pi/sample_per_axis,1.0,1.0,1.0])

('Scales: ', (0.20734511513692636, 0.5235987755982988, 0.5235987755982988, 1.0, 1.0, 1.0))
  0 = -0.00331 : (-1.2440706908215582, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  1 = -0.00153 : (-1.0367255756846319, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)

  # from -12° to 12°
Reg.SetOptimizerScales([0.066*2*pi/sample_per_axis,2.0*pi/sample_per_axis,2.0*pi/sample_per_axis,1.0,1.0,1.0])

('Scales: ', (0.034557519189487726, 0.5235987755982988, 0.5235987755982988, 1.0, 1.0, 1.0))
  0 = -0.00033 : (-0.20734511513692636, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  1 = -0.00026 : (-0.17278759594743864, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  2 = -0.00027 : (-0.1382300767579509, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  3 = -0.00032 : (-0.10367255756846318, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  4 = -0.00060 : (-0.06911503837897545, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  5 = -0.00103 : (-0.034557519189487726, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  6 = -0.00159 : (0.0, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  7 = -0.00216 : (0.034557519189487726, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  8 = -0.00271 : (0.06911503837897545, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  9 = -0.00332 : (0.10367255756846318, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 10 = -0.00391 : (0.1382300767579509, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 11 = -0.00386 : (0.17278759594743864, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
 12 = -0.00338 : (0.20734511513692636, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)


sample_per_axis=8
Reg.SetOptimizerAsExhaustive([sample_per_axis/2,sample_per_axis/2,sample_per_axis/4,0,0,0])
Reg.SetOptimizerScales([0.066*2*pi/sample_per_axis,2.0*pi/sample_per_axis,2.0*pi/sample_per_axis,1.0,1.0,1.0])

('Scales: ', (0.05183627878423159, 0.7853981633974483, 0.7853981633974483, 1.0, 1.0, 1.0))
  0 = -0.00033 : (-0.20734511513692636, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  1 = -0.00024 : (-0.15550883635269477, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  2 = -0.00032 : (-0.10367255756846318, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  3 = -0.00079 : (-0.05183627878423159, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  4 = -0.00159 : (0.0, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  5 = -0.00239 : (0.05183627878423159, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  6 = -0.00332 : (0.10367255756846318, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  7 = -0.00395 : (0.15550883635269477, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  8 = -0.00338 : (0.20734511513692636, -3.141592653589793, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)
  9 = -0.00233 : (-0.20734511513692636, -2.356194490192345, -1.5707963267948966, 0.31671285085594114, -3.994365609038554, -47.07746333542327)


"""


# Set the Euler3DTransform
eulerTrans=sitk.Euler3DTransform(sitk.CenteredTransformInitializer(fixedMask,movingMask,sitk.Euler3DTransform()))
Reg.SetInitialTransform(eulerTrans)

# write the transform
sitk.WriteTransform(eulerTrans,eulerTransPath)

# Execute & write
Reg.AddCommand(sitk.sitkIterationEvent, lambda: command_iteration(Reg))
outTx = Reg.Execute(fixedVolume, movingVolume)
sitk.WriteTransform(outTx,outTxPath)

# RIGID REGISTRATION PHASE
# _______________________________

# trans_afterInit=sitk.ReadTransform('/Users/peterbehringer/MyTesting/SimpleITK_Tests/outTx_exhaustive.h5')

quickSetVersor=sitk.VersorRigid3DTransform()
quickSetVersor.SetCenter(outTx.GetCenter())
quickSetVersor.SetTranslation(outTx.GetTranslation())
quickSetVersor.SetMatrix(outTx.GetMatrix())

sitk.WriteTransform(quickSetVersor,trans_rigid_beforeRegistrationPath)

Reg2=sitk.ImageRegistrationMethod()
Reg2.SetInitialTransform(quickSetVersor)
Reg2.SetMetricAsCorrelation()
Reg2.SetMetricFixedMask(fixedMask)
Reg2.SetMetricMovingMask(movingMask)
Reg2.SetInterpolator(sitk.sitkLinear)


# BRAINSFIT IGT SLICER 3.6 PARAMS
# --minimumStepLength	0.005
# --numberOfIterations	1500
# --translationScale 1000

# BRAINSFitHelperTemplate.hxx PARAMS
# m_MaximumStepLength(0.2)
# m_MinimumStepLength(1, 0.005)
# m_RelaxationFactor(0.5)
# m_ProjectedGradientTolerance(1e-5)

# PARAMS SetOptimizerAsRegularStepGradientDescent
# double learningRate,                                    ?
# double minStep,                                         0.005
# unsigned int numberOfIterations,                        100 (1500 actually)
# double relaxationFactor                                 0.5
# double gradientMagnitudeTolerance                       1e-5
# EstimateLearningRateType estimateLearningRate=Never     ?
# double maximumStepSizeInPhysicalUnits                   0.2

Reg2.SetOptimizerAsRegularStepGradientDescent(minStep=0.005,
                                          numberOfIterations=100,
                                          relaxationFactor = 0.5,
                                          gradientMagnitudeTolerance=1e-5,
                                          maximumStepSizeInPhysicalUnits=0.2)


outTxAfterRigid = Reg2.Execute(fixedVolume, movingVolume)

sitk.WriteTransform(outTxAfterRigid,outTxAfterRigidPath)


# AFFINE REGISTRATION PHASE
# _______________________________




# BSPLINE REGISTRATION PHASE
# _______________________________
